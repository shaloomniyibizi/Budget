generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  username              String?                @unique
  password              String?
  image                 String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  onboarded             Boolean                @default(false)
  bio                   String?
  UserCurrency          UserCurrency?
  Category              Category[]
  Transaction           Transaction[]
  MonthHistory          MonthHistory[]
  YearHistory           YearHistory[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserCurrency {
  userId   String  @unique
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  currency String?
}

model Category {
  createdAt DateTime @default(now())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  icon      String
  type      String   @default("income")

  @@unique([name, userId, type])
}

model Transaction {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updateAt     DateTime @default(now())
  amount       Float
  description  String
  date         DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type         String   @default("income")
  category     String
  categoryIcon String
}

model MonthHistory {
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  day     Int
  month   Int
  year    Int
  income  Float?
  expense Float?

  @@id([day, month, year, userId])
}

model YearHistory {
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  month   Int
  year    Int
  income  Float?
  expense Float?

  @@id([month, year, userId])
}
